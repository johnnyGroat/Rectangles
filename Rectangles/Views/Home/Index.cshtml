@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <link rel="stylesheet" type="text/css" href="content/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="content/css/overrides.css" />
    <script type="text/javascript" src="content/bootstrap/js/bootstrap.min.js"></script>
    <meta name="viewport" content="width=device-width" />
    <title>Rectangles</title>
</head>
<body>
    <div class="span8">
        <div id="rect-header">
            <span>
            In each below section, input two opposite verticies of each rectangle and this program will determine Intersection, Containment, and Adjacency of each rectangle.
            </span>
            <span>
                Max coordinate size is out of 100 and all coordinates must be integers.
            </span>
        </div>
        @for (int i = 1; i <= 2; i++)
        {
            <div class="container">
                <span>Rectangle @i.ToString()</span>
            @for (int j = 1; j <= 2; j++)
            { 
                <div id="rectangle-@i.ToString()" class="input-group">
                    <span class="input-group-addon" id="rect-@i.ToString()-vertex-@j.ToString()-x-label">Vertex @j.ToString() X</span>
                    <input id="rectangle-@i.ToString()-vertex-@j.ToString()-x" class="form-control" type="text" aria-describedby="rectangle-@i.ToString()-vertex-@j.ToString()-x-label">
                </div>
                <div id="rectangle-@i.ToString()" class="input-group">
                    <span class="input-group-addon" id="rect-@i.ToString()-vertex-@j.ToString()-y-label">Vertex @j.ToString() Y</span>
                    <input id="rectangle-@i.ToString()-vertex-@j.ToString()-y" class="form-control" type="text" aria-describedby="rectangle-@i.ToString()-vertex-@j.ToString()-y-label">
                </div>
            }
            </div>
        }
        <div>
            <button type="button" class="btn btn-default" id="_submitVertices">Submit</button>
        </div>
        <div id="gridResults">
            <div>
                Rectangles Have Containment: <span id="_haveContainment"></span>
            </div>
            <div>
               Rectangles Have Adjacency: <span id="_haveAdjacency"></span>
            </div>
            <div>
                Rectangles Have Intersection: <span id="_haveIntersection"></span>
            </div>
        </div>
    </div>
    <canvas id="_rectangleCanvas" width="300" height="300" style="border: 1px solid #d3d3d3; margin-left:20px;margin-bottom: 50px;"></canvas>
    <script type="text/javascript">
        //set our canvas elements as globals so we are able to reset them during consecutive runs
        var canvasRectangle = document.getElementById('_rectangleCanvas');
        var rectangleContext = canvasRectangle.getContext('2d');
        $(function () {
            $('#_submitVertices').click(function () {
                ResetPropertyOutput();
                ResetRectangleCanvas();

                var rectangle1Verticies = { xVertex1: $('#rectangle-1-vertex-1-x').val(), yVertex1: $('#rectangle-1-vertex-1-y').val(), xVertex2: $('#rectangle-1-vertex-2-x').val(), yVertex2: $('#rectangle-1-vertex-2-y').val() };         
                var rectangle2Verticies = { xVertex1: $('#rectangle-2-vertex-1-x').val(), yVertex1: $('#rectangle-2-vertex-1-y').val(), xVertex2: $('#rectangle-2-vertex-2-x').val(), yVertex2: $('#rectangle-2-vertex-2-y').val() };
                
                $.ajax({
                    url: '/Home/CheckRectangles',
                    type: 'POST',
                    dataType: 'json',
                    cache: false,
                    data: {
                        rectangle1Vertices: JSON.stringify(rectangle1Verticies),
                        rectangle2Vertices: JSON.stringify(rectangle2Verticies)
                    },
                    success: function (data) {
                        OutputRectangleProperties(data.rectangleProperties);
                        DrawRectangles(data.rectangle1, data.rectangle2);
                    }
                });
            });
        });

        function OutputRectangleProperties(properties)
        {
            if(properties.hasAdjacency)
            {
                $('#_haveAdjacency').html('True');
            }
            else
            {
                $('#_haveAdjacency').html('False');
            }
            if(properties.hasContainment)
            {
                $('#_haveContainment').html('True');
            }
            else
            {
                $('#_haveContainment').html('False');
            }
            if(properties.hasIntersection)
            {
                $('#_haveIntersection').html('True');
            }
            else
            {
                $('#_haveIntersection').html('False');
            }
        }

        function ResetPropertyOutput()
        {
            $('#_haveIntersection').html('');
            $('#_haveAdjacency').html('');
            $('#_haveContainment').html('');
        }

        function DrawRectangles(rectangle1, rectangle2)
        {
            rectangleContext.beginPath();

            //I'm subtracting 300 from the y coordinate here so that the point (0,0) is at the bottom of the canvas to mimic how I wrote the backend code
            rectangleContext.rect(rectangle1.xVertex1, 300 -rectangle1.yVertex1, (rectangle1.xVertex2 - rectangle1.xVertex1), (rectangle1.yVertex1 - rectangle1.yVertex2));

            rectangleContext.stroke();
            rectangleContext.closePath();
            rectangleContext.beginPath();

            rectangleContext.rect(rectangle2.xVertex1, 300 -rectangle2.yVertex1, (rectangle2.xVertex2 - rectangle2.xVertex1), (rectangle2.yVertex1 - rectangle2.yVertex2));

            rectangleContext.stroke();
            rectangleContext.closePath();
        }

        function ResetRectangleCanvas()
        {
            rectangleContext.clearRect(0, 0, canvasRectangle.width, canvasRectangle.height);
            //reset the context
            rectangleContext = canvasRectangle.getContext('2d');
        }
    </script>
</body>
</html>
